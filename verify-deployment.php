<?php
/**
 * AuditorSoft - Script de Verificaci√≥n de Despliegue
 * Verifica que todos los componentes est√©n funcionando correctamente
 */

echo "üîç AuditorSoft - Verificaci√≥n de Despliegue\n";
echo "==========================================\n\n";

$errors = [];
$warnings = [];

// Verificar estructura de archivos
echo "üìÅ Verificando estructura de archivos...\n";

$requiredDirs = [
    'app', 'bootstrap', 'config', 'database', 'resources', 'routes', 'storage', 'vendor', 'public'
];

foreach ($requiredDirs as $dir) {
    if (!is_dir($dir)) {
        $errors[] = "Directorio faltante: $dir";
    } else {
        echo "‚úÖ $dir - OK\n";
    }
}

// Verificar archivos cr√≠ticos
echo "\nüìÑ Verificando archivos cr√≠ticos...\n";

$requiredFiles = [
    'artisan',
    'composer.json',
    '.env.example',
    'public/index.php',
    'public/css/app.css',
    'public/js/app.js'
];

foreach ($requiredFiles as $file) {
    if (!file_exists($file)) {
        $errors[] = "Archivo faltante: $file";
    } else {
        echo "‚úÖ $file - OK\n";
    }
}

// Verificar permisos de storage
echo "\nüîí Verificando permisos...\n";

$storageWritable = is_writable('storage');
$bootstrapWritable = is_writable('bootstrap/cache');

if (!$storageWritable) {
    $errors[] = "El directorio storage/ no es escribible";
} else {
    echo "‚úÖ storage/ - Escribible\n";
}

if (!$bootstrapWritable) {
    $errors[] = "El directorio bootstrap/cache/ no es escribible";
} else {
    echo "‚úÖ bootstrap/cache/ - Escribible\n";
}

// Verificar CSS moderno
echo "\nüé® Verificando estilos modernos...\n";

$cssFile = 'public/css/app.css';
if (file_exists($cssFile)) {
    $cssContent = file_get_contents($cssFile);
    
    $modernFeatures = [
        ':root {' => 'Variables CSS',
        'sidebar' => 'Sidebar moderno',
        'border-radius: 8px' => 'Bordes redondeados',
        'backdrop-filter' => 'Efectos modernos',
        'transition:' => 'Transiciones suaves'
    ];
    
    foreach ($modernFeatures as $feature => $description) {
        if (strpos($cssContent, $feature) !== false) {
            echo "‚úÖ $description - Implementado\n";
        } else {
            $warnings[] = "$description no encontrado en CSS";
        }
    }
} else {
    $errors[] = "Archivo CSS principal no encontrado";
}

// Verificar JavaScript
echo "\n‚ö° Verificando JavaScript...\n";

$jsFile = 'public/js/app.js';
if (file_exists($jsFile)) {
    $jsContent = file_get_contents($jsFile);
    
    $jsFeatures = [
        'sidebarToggle' => 'Toggle del sidebar',
        'addEventListener' => 'Event listeners',
        'classList.toggle' => 'Manipulaci√≥n del DOM',
        'setTimeout' => 'Temporizadores'
    ];
    
    foreach ($jsFeatures as $feature => $description) {
        if (strpos($jsContent, $feature) !== false) {
            echo "‚úÖ $description - Implementado\n";
        } else {
            $warnings[] = "$description no encontrado en JS";
        }
    }
} else {
    $errors[] = "Archivo JavaScript principal no encontrado";
}

// Verificar vistas modernizadas
echo "\nüñºÔ∏è Verificando vistas modernizadas...\n";

$viewFiles = [
    'resources/views/layouts/app.blade.php' => 'Layout principal',
    'resources/views/super-admin/dashboard.blade.php' => 'Dashboard Super Admin',
    'resources/views/auditor/dashboard.blade.php' => 'Dashboard Auditor',
    'resources/views/jefe-auditor/dashboard.blade.php' => 'Dashboard Jefe Auditor',
    'resources/views/auditado/dashboard.blade.php' => 'Dashboard Auditado'
];

foreach ($viewFiles as $file => $description) {
    if (file_exists($file)) {
        $content = file_get_contents($file);
        if (strpos($content, 'modern-') !== false || strpos($content, 'sidebar') !== false) {
            echo "‚úÖ $description - Modernizado\n";
        } else {
            $warnings[] = "$description puede no estar completamente modernizado";
        }
    } else {
        $errors[] = "Vista faltante: $file";
    }
}

// Verificar compatibilidad con Hostinger
echo "\nüåê Verificando compatibilidad con Hostinger...\n";

// Verificar que no se use @vite
$appBladeFile = 'resources/views/layouts/app.blade.php';
if (file_exists($appBladeFile)) {
    $content = file_get_contents($appBladeFile);
    if (strpos($content, '@vite') !== false) {
        $errors[] = "A√∫n se est√° usando @vite() en lugar de asset() - incompatible con Hostinger";
    } else {
        echo "‚úÖ Usando asset() helper - Compatible con Hostinger\n";
    }
}

// Verificar archivos de deployment
$deploymentFiles = [
    'prepare-deployment.sh',
    'prepare-deployment.bat',
    'DEPLOYMENT_HOSTINGER.md'
];

foreach ($deploymentFiles as $file) {
    if (file_exists($file)) {
        echo "‚úÖ $file - Disponible\n";
    } else {
        $warnings[] = "Archivo de deployment faltante: $file";
    }
}

// Resumen final
echo "\n" . str_repeat("=", 50) . "\n";
echo "üìä RESUMEN DE VERIFICACI√ìN\n";
echo str_repeat("=", 50) . "\n";

if (empty($errors)) {
    echo "üéâ ¬°Verificaci√≥n exitosa! El proyecto est√° listo para despliegue.\n";
} else {
    echo "‚ùå Se encontraron " . count($errors) . " errores cr√≠ticos:\n";
    foreach ($errors as $error) {
        echo "   ‚Ä¢ $error\n";
    }
}

if (!empty($warnings)) {
    echo "\n‚ö†Ô∏è  Advertencias (" . count($warnings) . "):\n";
    foreach ($warnings as $warning) {
        echo "   ‚Ä¢ $warning\n";
    }
}

echo "\nüìã SIGUIENTE PASO:\n";
if (empty($errors)) {
    echo "Ejecuta 'prepare-deployment.bat' (Windows) o 'prepare-deployment.sh' (Linux/Mac)\n";
    echo "para crear los archivos listos para subir a Hostinger.\n";
} else {
    echo "Corrige los errores listados antes de proceder con el despliegue.\n";
}

echo "\n‚ú® AuditorSoft modernizado con √©xito:\n";
echo "   ‚Ä¢ Dise√±o profesional estilo Claude.ai/ChatGPT\n";
echo "   ‚Ä¢ Sidebar moderno y responsive\n";
echo "   ‚Ä¢ Dashboards espec√≠ficos por rol\n";
echo "   ‚Ä¢ Compatible con Hostinger sin VPS\n";
echo "   ‚Ä¢ CSS y JS optimizados\n";
